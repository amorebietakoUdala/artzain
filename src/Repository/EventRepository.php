<?php

namespace App\Repository;

use App\Entity\MonitorizableEvent;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends \Doctrine\ORM\EntityRepository
{
    public function findAllFromToQB($criteriaAnd = null,  $criteriaLike = null, $from =null, $to =null )
    {
	$qb = $this->createQueryBuilder('e');
	if ($from !== null) {
	    $qb->andWhere('e.date >= :from')
		->setParameter('from', $from);
	}
	if ($to !== null) {
	    $qb->andWhere('e.date <= :to')
	    ->setParameter('to', $to);
	}
	if ( $criteriaAnd )
        {
            foreach ( $criteriaAnd as $eremua => $filtroa ) {
		if ($filtroa !== null ) {
		    $qb->andWhere('e.'.$eremua.' = :'.$eremua)
			->setParameter($eremua, $filtroa);
		} else {
		    $qb->andWhere('e.'.$eremua.' is null');
		}
            }
        }
	if ( $criteriaLike )
        {
            foreach ( $criteriaLike as $eremua => $filtroa ) {
                $qb->andWhere('e.'.$eremua.' LIKE :'.$eremua)
                    ->setParameter($eremua, '%'.$filtroa.'%');
            }
        }
	$qb->orderBy('e.date', 'DESC');
//	dump($qb->getQuery()->getSQL());die;
        return $qb;
    }

    public function findAllFromTo ($criteria = null, $from = null, $to = null )
    {
	$criteriaLikeKeys = ['subject' => null ,'details' => null ];
	$criteriaLike = $criteriaAnd = null;
	if ( $criteria !== null ) {
	    $criteriaLike = array_intersect_key($criteria,$criteriaLikeKeys);
	    $criteriaAnd = array_diff_key($criteria,$criteriaLikeKeys);
	}
        return $this->findAllFromToQB($criteriaAnd, $criteriaLike ,$from,$to)->getQuery()->getResult();
    }

    public function findUnmatchedEventsFromTo ($criteria = null, $from = null, $to = null )
    {
	$criteria['monitorizableEvent'] = null;
        return $this->findAllFromTo($criteria,$from,$to);
    }

    /**
    * @return Event|null Return the lastMatchedEvent if there is one.
    */
    public function findLastMatchedEvent ( MonitorizableEvent $mevent )
    {
	$criteria['monitorizableEvent'] = $mevent;
        return $this->findOneBy($criteria,['date' => 'DESC']);
    }

}
